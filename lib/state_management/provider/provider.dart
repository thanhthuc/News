import 'package:flutter/material.dart';import 'package:news/api_client/api_client.dart';import '../../model/news_model.dart';import '../../small_component/published_dropdown_view.dart';// TODO: add abtract class to Provider/*First => Provider, GetX, Bloc,1. 3 kind of list view: Expanded, Wrap, Instrictwidth/height, grig, list, card in bookmark, top trend2. Bookmark / local store rage3. UI make beauty, improve sliver scroll for detail page also list page4. handle error5. tabbar / card view for Top trending6. change theme7. fill all field data / correct full content8. localization => translate9. Optimize load UI for performance10. Navigation11. implement bookmark / share in detail12. Pull to refresh// Earn money:13. advertise14. in app purchase// Reality this app is:=> App data flow */// abstract class NewsListProviderI: ChangeNotifier { }class NewsListProvider extends ChangeNotifier {  List<News> listNews = [];  final APIClient _client = APIClient();  int currentPage = 1;  DropdownFilterState sortBy = DropdownFilterState.publishAt;  bool isAllNew = true;  bool isLoading = true;  Future<void> fetchAllNews() async {    var newsList = await _client.fetchNews();    listNews = newsList;    isLoading = false;    notifyListeners();  }  Future<void> fetchNews(int page, DropdownFilterState sortBy) async {    currentPage = page;    this.sortBy = sortBy;    var newList = await _client.fetchNewsWith(page, sortBy);    listNews = newList;    isLoading = false;    notifyListeners();  }  Future<void> fetchTopHeading() async {    var newList = await _client.fetchTopNews();    listNews = newList;    isLoading = false;    notifyListeners();  }  void changeCurrentPage(int page) {    currentPage = page;    notifyListeners();  }  void changeSortBy(DropdownFilterState sortBy) {    this.sortBy = sortBy;    notifyListeners();  }  void changeIsAllNewsView(bool isAllNews) {    isAllNew = isAllNews;    notifyListeners();  }  void nextCallbackHandle() {    int newPage = currentPage + 1;    changeCurrentPage(newPage);    fetchNews(currentPage, sortBy);  }  void preCallbackHandle() {    int newPage = currentPage - 1;    changeCurrentPage(newPage);    fetchNews(currentPage, sortBy);  }}